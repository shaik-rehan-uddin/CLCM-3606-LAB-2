name: Deploy Code to EC2 Server

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@master

    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_URL}}

    - name: Build and push Docker image to ECR
      run: |
        docker buildx create --use
        docker buildx inspect --bootstrap
        docker buildx build --load \
         --build-arg RDS_USERNAME=${{ secrets.RDS_USERNAME }} \
         --build-arg RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} \
         --build-arg RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }} \
         --build-arg RDS_DATABASE=${{ secrets.RDS_DATABASE }} \
         -t ${{ secrets.ECR_REPO_NAME }}:latest .
        docker push ${{ secrets.ECR_REPO_NAME }}:latest

    - name: Check Docker Image Pushed to ECR
      run: |
        if docker manifest inspect ${{ secrets.ECR_REPO_NAME }}:latest &> /dev/null; then
          echo "Docker image pushed to Amazon ECR successfully. Test passed!"
        else
          echo "Docker image not found on Amazon ECR. Test failed."
          exit 1
        fi

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            existing_container=$(docker ps -q -f name=${{ secrets.ECR_REPO_NAME }})
            if [ ! -z "$existing_container" ]; then
                echo "Stopping and removing existing container..."
                docker stop $existing_container
                docker rm $existing_container
            fi
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_URL }}
            docker pull ${{ secrets.ECR_REPO_NAME }}:latest
            docker run -d -p 80:80 --name ${{ secrets.ECR_REPO_NAME }} ${{ secrets.ECR_REPO_NAME }}:latest
            docker image prune -f
  
  testing:
    needs: deploy-to-ec2
    runs-on: ubuntu-latest

    steps:
    - name: Run Site Accessibility Test
      run: |
        response_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.HOST_DNS }}/)
        if [ "$response_code" -eq "200" ]; then
          echo "Site is accessible. Test passed!"
        else
          echo "Site is not accessible. Test failed."
          exit 1
        fi
